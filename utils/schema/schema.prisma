datasource db {
  provider = "postgresql"
 url      = "postgres://kumargau_app:bZ0Rzy2mZVAf5WU1@postgres.iro.umontreal.ca/kumargau?schema=kumargau"
  // url = "postgres://postgres:1234@localhost/promptslr"
}

generator db {
  provider             = "prisma-client-py"
  interface            = "sync"
  recursive_type_depth = 5
}

model Users {
  UserID       Int       @id @default(autoincrement())
  Username     String    @unique
  Email        String    @unique
  PasswordHash String
  CreatedAt    DateTime
  UpdatedAt    DateTime?
}

model Projects {
  ProjectID        String            @id
  Name             String
  Iteration        Int
  TopicTitle       String?
  TopicDescription String?
  ContextTokens    Int?
  LLMs             LLMs[]
  Datasets         Dataset[]
  Configurations   Configurations[]
  LLMDecisions     LLMDecisions[]
  ProjectDatasets  ProjectDatasets[]
  ProjectShots     ProjectShots[]
}

model LLMs {
  LLMID              Int              @id @default(autoincrement())
  ProjectID          String
  Name               String
  URL                String?
  APIKey             String?
  DefaultTemperature Float?
  DefaultMaxTokens   Int?
  Project            Projects         @relation(fields: [ProjectID], references: [ProjectID])
  LLMHyperparams     LLMHyperparams[]
  LLMDecisions       LLMDecisions[]
}

model LLMHyperparams {
  HyperparamID Int    @id @default(autoincrement())
  LLMID        Int
  Key          String
  Value        String
  LLMs         LLMs?  @relation(fields: [lLMsLLMID], references: [LLMID])
  lLMsLLMID    Int?
}

model Dataset {
  DatasetID         String            @id @default(uuid())
  Name              String
  Articles          Articles[]
  ProjectDatasets   ProjectDatasets[]
  Projects          Projects?         @relation(fields: [projectsProjectID], references: [ProjectID])
  projectsProjectID String?
}

model Configurations {
  ConfigurationID       Int      @id @default(autoincrement())
  ProjectID             String
  ConfigJson            String
  RenderedPromptContext String
  Project               Projects @relation(fields: [ProjectID], references: [ProjectID])
}

model Articles {
  Key               String         @id @default(uuid())
  BibtexKey         String
  Title             String
  Abstract          String?
  DOI               String?
  Keywords          String?
  Authors           String?
  Venue             String?
  References        String?
  Bibtex            String?
  ScreenedDecision  String
  FinalDecision     String? // Future work not important for now
  Mode              String?
  InclusionCriteria String?
  ExclusionCriteria String?
  GeneratedSummary  String?
  IsShot            Boolean?
  ReviewerCount     Int?
  DatasetID         String
  LLMDecisions      LLMDecisions[]
  ProjectShots      ProjectShots[]
  Dataset           Dataset?       @relation(fields: [datasetDatasetID], references: [DatasetID])
  datasetDatasetID  String?
}

model LLMDecisions {
  DecisionID Int      @id @default(autoincrement())
  LLMID      Int
  ArticleKey String
  ProjectID  String
  Decision   String
  Error      Boolean
  Retries    Int
  Iteration  Int
  RawOutput  String?
  Reason     String?
  Confidence Float?
  TokenUsed  Int?
  LLM        LLMs     @relation(fields: [LLMID], references: [LLMID])
  Article    Articles @relation(fields: [ArticleKey], references: [Key])
  Project    Projects @relation(fields: [ProjectID], references: [ProjectID])
}

model ProjectDatasets {
  ProjectID String
  DatasetID String
  Project   Projects @relation(fields: [ProjectID], references: [ProjectID])
  Dataset   Dataset  @relation(fields: [DatasetID], references: [DatasetID])

  @@id([ProjectID, DatasetID])
}

model ProjectShots {
  ProjectID  String
  ArticleKey String
  positive   Boolean
  Project    Projects @relation(fields: [ProjectID], references: [ProjectID])
  Key        Articles @relation(fields: [ArticleKey], references: [Key])

  @@id([ProjectID, ArticleKey])
}
